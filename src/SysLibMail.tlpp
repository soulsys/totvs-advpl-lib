#include "tlpp-core.th"


/*/{Protheus.doc} SysLibMail
 
Objeto para controle de envio de e-mail
  
@author soulsys:victorhugo
@since 18/09/2021
/*/   
class SysLibMail from SysLibAdvpl

  public data cServer
  public data nPort 		
  public data cAccount	    
  public data cPassword	
  public data cError 		
  public data cFrom 			
  public data lAuthenticate	
  public data lConnected 	
  public data lSSL 			
  public data lTLS
  public data lImap 			
  public data nTimeOut	
  public data cHtmlLayout 		
  public data oMailManager	
  public data oMailMsg 
  public data oWfHtml 		
  public data nLastError	
  
  public method new() constructor
  
  public method getServer()		
  public method setServer()
  public method getPort()		
  public method setPort()		
  public method getAccount()	
  public method setAccount()	
  public method getPassword()	
  public method setPassword()	
  public method getError()		
  public method setError()		
  public method getFrom()		
  public method setFrom()		
  public method isAuthenticate()
  public method setAuthenticate() 
  public method isConnected()	 
  public method setConnected()	
  public method isSSL()		
  public method setSSL()		
  public method isTLS()		
  public method setTLS()
  public method isImap()		
  public method setImap()		
  public method getTimeOut()	
  public method setTimeOut()
  public method getHtmlLayout()
  public method setHtmlLayout()	
    
  public method connect()					
  public method send()						
  public method disconnect()				
  public method attachFile()				
  public method setConfirmRead()	
  public method setHtmlValue()
  public method addHtmlTableValue()		
  public method showProperties()			
  
endClass


/*/{Protheus.doc} new

Construtor

@author soulsys:victorhugo
@since 18/09/2021
/*/
method new(cServer, cAccount, cPassword, cFrom, lAuthenticate, lSSL, lTLS, nTimeOut, cHtml) class SysLibMail
  
  default cServer 		  := GetMV("MV_RELSERV")
  default cAccount    	:= GetMV("MV_RELACNT") 
  default cPassword		  := GetMV("MV_RELPSW")
  default cFrom			    := GetMV("MV_RELFROM") 
  default lAuthenticate := GetMV("MV_RELAUTH")
  default lSSL			    := GetMV("MV_RELSSL")
  default lTLS			    := GetMV("MV_RELTLS") 
  default nTimeOut		  := GetMV("MV_RELTIME") 	
  default cHtml			    := ""
  
  _Super:new()
  
  ::setPort(25)
  ::setServer(cServer) 	
  ::setAccount(cAccount)
  ::setPassword(cPassword)
  ::setFrom(cFrom)
  ::setAuthenticate(lAuthenticate)
  ::setSSL(lSSL)
  ::setTLS(lTLS)
  ::setImap(.F.)
  ::setTimeOut(nTimeOut)
  ::setConnected(.F.)	
  ::setError("")
  ::setHtmlLayout(cHtml)
  
  ::oMailManager := TMailManager():new()
      
  ::oMailMsg := TMailMessage():new()
  ::oMailMsg:clear() 
  
  if File(cHtml)
    ::oWfHtml := TWfHtml():new(cHtml)
  endIf	
                         
return


/*/{Protheus.doc} getServer

Coleta o servidor

@author soulsys:victorhugo
@since 18/09/2021
/*/
method getServer() class SysLibMail
return ::cServer


/*/{Protheus.doc} setServer

Define o Servidor

@author soulsys:victorhugo
@since 18/09/2021
/*/
method setServer(cServer) class SysLibMail
  
  local cStrPort := ""
  
  ::cServer := cServer
  
  if (":" $ cServer)
    cStrPort   := SubStr(cServer, At(":", cServer))
    ::cServer  := StrTran(cServer, cStrPort, "")
    ::nPort    := Val(StrTran(cStrPort, ":", ""))
  endIf
  
return 


/*/{Protheus.doc} getPort

Coleta a porta do servidor

@author soulsys:victorhugo
@since 18/09/2021
/*/
method getPort() class SysLibMail
return ::nPort


/*/{Protheus.doc} setPort

Define a porta do servidor

@author soulsys:victorhugo
@since 18/09/2021
/*/
method setPort(nPort) class SysLibMail
  ::nPort := nPort
return 


/*/{Protheus.doc} getAccount

Coleta a conta de e-mail

@author soulsys:victorhugo
@since 18/09/2021
/*/
method getAccount() class SysLibMail
return ::cAccount


/*/{Protheus.doc} setAccount

Define a conta de e-mail

@author soulsys:victorhugo
@since 18/09/2021
/*/
method setAccount(cAccount) class SysLibMail
  ::cAccount := cAccount
return 


/*/{Protheus.doc} getPassword

Coleta a Senha de Usuario

@author soulsys:victorhugo
@since 18/09/2021
/*/
method getPassword() class SysLibMail
return ::cPassword


/*/{Protheus.doc} setPassword

Define a Senha de Usuario

@author soulsys:victorhugo
@since 18/09/2021
/*/
method setPassword(cPassword) class SysLibMail
  ::cPassword := cPassword
return      


/*/{Protheus.doc} getError

Coleta a Mensagem de Erro

@author soulsys:victorhugo
@since 18/09/2021
/*/
method getError() class SysLibMail
return ::cError


/*/{Protheus.doc} setError

Define a Mensagem de Erro

@author soulsys:victorhugo
@since 18/09/2021
/*/
method setError(cError) class SysLibMail
  ::cError := cError
return


/*/{Protheus.doc} getFrom

Coleta o Remetente do Email

@author soulsys:victorhugo
@since 18/09/2021
/*/
method getFrom() class SysLibMail
return ::cFrom


/*/{Protheus.doc} setFrom

Define o Remetente do Email

@author soulsys:victorhugo
@since 18/09/2021
/*/
method setFrom(cFrom) class SysLibMail
  ::cFrom := cFrom
return
                        

/*/{Protheus.doc} isAuthenticate

Indica se o Servidor requer autenticacao

@author soulsys:victorhugo
@since 18/09/2021
/*/
method isAuthenticate() class SysLibMail
return ::lAuthenticate


/*/{Protheus.doc} setAuthenticate

Define se o Servidor requer autenticacao

@author soulsys:victorhugo
@since 18/09/2021
/*/
method setAuthenticate(lAuthenticate) class SysLibMail
  ::lAuthenticate := lAuthenticate
return 


/*/{Protheus.doc} isConnected

Indica se o Objeto esta conectado ao Servidor de Email

@author soulsys:victorhugo
@since 18/09/2021
/*/
method isConnected() class SysLibMail
return ::lConnected


/*/{Protheus.doc} setConnected

Define se o Objeto esta conectado ao Servidor de Email

@author soulsys:victorhugo
@since 18/09/2021
/*/
method setConnected(lConnected) class SysLibMail
  ::lConnected := lConnected
return


/*/{Protheus.doc} isSSL

Indica se o Servidor utiliza conexao SSL

@author soulsys:victorhugo
@since 18/09/2021
/*/
method isSSL() class SysLibMail
return ::lSSL


/*/{Protheus.doc} setSSL

Define se o Servidor utiliza conexao SSL

@author soulsys:victorhugo
@since 18/09/2021
/*/
method setSSL(lSSL) class SysLibMail
  ::lSSL := lSSL
return


/*/{Protheus.doc} isTLS

Indica se o Servidor utiliza conexao TLS

@author soulsys:victorhugo
@since 18/09/2021
/*/
method isTLS() class SysLibMail
return ::lTLS


/*/{Protheus.doc} setTLS

Define se o Servidor utiliza conexao TLS

@author soulsys:victorhugo
@since 18/09/2021
/*/
method setTLS(lTLS) class SysLibMail
  ::lTLS := lTLS
return


/*/{Protheus.doc} isImap

Indica se o Servidor utiliza conexao IMAP

@author soulsys:victorhugo
@since 18/09/2021
/*/
method isImap() class SysLibMail
return ::lImap


/*/{Protheus.doc} setImap

Define se o Servidor utiliza conexao IMAP

@author soulsys:victorhugo
@since 18/09/2021
/*/
method setImap(lImap) class SysLibMail
  ::lImap := lImap
return


/*/{Protheus.doc} getTimeOut

Coleta o Time-Out do Servidor SMTP

@author soulsys:victorhugo
@since 18/09/2021
/*/
method getTimeOut() class SysLibMail
return ::nTimeOut


/*/{Protheus.doc} setTimeOut

Define o Time-Out do Servidor SMTP

@author soulsys:victorhugo
@since 18/09/2021
/*/
method setTimeOut(nTimeOut) class SysLibMail
  ::nTimeOut := nTimeOut
return


/*/{Protheus.doc} getHtmlLayout

Coleta o arquivo HTML de Layout

@author soulsys:victorhugo
@since 18/09/2021
/*/
method getHtmlLayout() class SysLibMail	
return ::cHtmlLayout


/*/{Protheus.doc} setHtmlLayout

Define o arquivo HTML de Layout

@author soulsys:victorhugo
@since 18/09/2021
/*/
method setHtmlLayout(cHtml) class SysLibMail
  
  local lOk := File(cHtml)
  
  if lOk
    ::cHtmlLayout := cHtml
    ::oWfHtml 	  := TWfHtml():new(cHtml)		
  endIf
  
return lOk


/*/{Protheus.doc} connect

Conecta ao Servidor de Email

@author soulsys:victorhugo
@since 18/09/2021
/*/
method connect() class SysLibMail

  ::oMailManager:setUseSSL(::isSSL())
  ::oMailManager:setUseTLS(::isTLS())
  ::oMailManager:setSmtpTimeOut(::getTimeOut())	
  
  if ::lImap
    ::oMailManager:init(::getServer(), "", ::getAccount(), ::getPassword(), ::getPort())
    ::nLastError := ::oMailManager:imapConnect()
  else
    ::oMailManager:init("", ::getServer(), ::getAccount(), ::getPassword(), 0, ::getPort())
    ::nLastError := ::oMailManager:smtpConnect()
  endIf	
  
  if (::nLastError == 0)
    ::setConnected(.T.)	
  else
    setErrorMessage(self, "Falha ao conectar ao Servidor de Email")
  endIf
                         
return ::isConnected()


/*/{Protheus.doc} send

Envia o e-mail

@author soulsys:victorhugo
@since 18/09/2021
/*/
method send(cTo, cSubject, cBody, cAttachment, cCC, cBCC) class SysLibMail
                                                                                   
  local lSendOk 	    := .F.
  local lAuthOk		    := .T.	
  local cHtml		 	    := ::getHtmlLayout()
  local lHtml			    := (!Empty(cHtml) .and. File(cHtml))
  default cBody		    := ""		
  default cAttachment	:= ""
  default cCC			    := ""
  default cBCC		    := ""
  
  if !::isConnected()
    if !::connect()
      return .F.		
    endIf	
  endIf
  
  if ::isAuthenticate()
    ::nLastError := ::oMailManager:smtpAuth(::getAccount(), ::getPassword())
    lAuthOk := (::nLastError == 0)
  endIf	
  
  if lAuthOk
    if lHtml
      cBody := ::oWfHtml:htmlCode()
    endIf
    ::oMailMsg:cFrom 	:= ::getFrom()	
    ::oMailMsg:cTo 		:= cTo		
    ::oMailMsg:cSubject	:= cSubject	
    ::oMailMsg:cBody 	:= cBody
    if !Empty(cCC)
      ::oMailMsg:cCC := cCC
    endIf
    if !Empty(cBCC)
      ::oMailMsg:cBCC := cBCC
    endIf		
    ::attachFile(cAttachment)
    ::nLastError := ::oMailMsg:send(::oMailManager)
    lSendOk := (::nLastError == 0)
  endIf
  
  if !lSendOk
    setErrorMessage(self, "Falha ao Enviar o Email") 
  endIf     
  
  if ::isConnected()
    ::disconnect()	
  endIf
      
return lSendOk


/*/{Protheus.doc} disconnect

Desconecta do Servidor de E-mail

@author soulsys:victorhugo
@since 18/09/2021
/*/
method disconnect() class SysLibMail
  
  local lDisconnectOk := .F.
    
    if ::isConnected()				
      ::nLastError := ::oMailManager:smtpDisconnect() 
    if !(lDisconnectOk := (::nLastError == 0))
      setErrorMessage(self, "Falha ao desconectar do Servidor de Email")
    endIf		
  endIf
      
return lDisconnectOk

/**
 * Define as Mensagens de Erro
 */
static function setErrorMessage(oSysLibMail, cActionMessage) 
  
  local cErrorMsg := oSysLibMail:oMailManager:getErrorString(oSysLibMail:nLastError)
      
  oSysLibMail:setError(cActionMessage+CRLF+CRLF+cErrorMsg)
    
return


/*/{Protheus.doc} attachFile

Anexa arquivos a Mensagem

@author soulsys:victorhugo
@since 18/09/2021
/*/
method attachFile(cFile) class SysLibMail
  
  local lOk := .F.
  
  if File(cFile)
    lOk := !(::oMailMsg:attachFile(cFile) < 0) 
  endIf
  
return lOk


/*/{Protheus.doc} setConfirmRead

Define se solicita confirmacao de leitura das mensagens enviadas

@author soulsys:victorhugo
@since 18/09/2021
/*/
method setConfirmRead(lConfirm) class SysLibMail	
  ::oMailMsg:setConfirmRead(lConfirm)	
return


/*/{Protheus.doc} setHtmlValue

Define valores para o Html

@author soulsys:victorhugo
@since 18/09/2021
/*/
method setHtmlValue(cVar, xValue) class SysLibMail	
  ::oWfHtml:valByName(cVar, xValue)	
return


/*/{Protheus.doc} addHtmlTableValue

Define valores para tabelas do Html

@author soulsys:victorhugo
@since 18/09/2021
/*/
method addHtmlTableValue(cVar, xValue) class SysLibMail
  aAdd((::oWfHtml:valByName(cVar)), xValue)	
return


/*/{Protheus.doc} showProperties

Exibe as propriedades configuradas para o objeto
  
@author soulsys:victorhugo
@since 18/09/2021
/*/
method showProperties() class SysLibMail
  
  local cMsg   := ""	
  local oUtils := LibUtilsObj():newLibUtilsObj()
  
  cMsg := "Server: " + ::getServer() + CRLF
  cMsg += "Port: " + oUtils:strAnyType(::getPort()) + CRLF
  cMsg += "Account: " + ::getAccount() + CRLF
  cMsg += "Password: " + ::getPassword() + CRLF
  cMsg += "From: " + ::getFrom() + CRLF
  cMsg += "Authenticate: " + oUtils:strAnyType(::isAuthenticate()) + CRLF	
  cMsg += "SSL: " + oUtils:strAnyType(::isSSL()) + CRLF
  cMsg += "TLS: " + oUtils:strAnyType(::isTLS()) + CRLF
  cMsg += "TimeOut: " + oUtils:strAnyType(::getTimeOut()) + CRLF
  cMsg += "Protocol: " + if (::lImap, "IMAP", "SMTP")
  
  MsgInfo(cMsg)	

return
