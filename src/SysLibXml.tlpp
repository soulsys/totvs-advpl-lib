#include "tlpp-core.th"
#include "totvs.ch"


/*/{Protheus.doc} SysLibXml

Objeto para manipulacao de arquivos XML

@author soulsys:victorhugo
@since 18/09/2021
/*/
class SysLibXml from SysLibAdvpl

  public data oXml
  public data cXml
  public data cError

  public method new() constructor

  public method setXml()  
  public method parse()
  public method text()
  public method node()
  public method list()
  public method nodeToString()
  public method exists()
  public method getError()

endClass


/*/{Protheus.doc} new

Construtor

@author soulsys:victorhugo
@since 18/09/2021
/*/
method new(cXml) class SysLibXml

  default cXml := ""

  _Super:new()
  
  ::setXml(cXml)
  
  ::cError := ""

return


/*/{Protheus.doc} setXml

Define a String ou Arquivo XML

@author soulsys:victorhugo
@since 18/09/2021
/*/
method setXml(cXml) class SysLibXml  	
  ::cXml := cXml  
return


/*/{Protheus.doc} parse

Realiza o parser do Xml

@author soulsys:victorhugo
@since 18/09/2021
/*/
method parse() class SysLibXml

  local lOk           := .F.
  local cError        := ""
  local cWarning      := ""
  local cFileOnServer := ""
  local cXml          := EncodeUTF8(NoAcento(::cXml))

  if Empty(cXml)
    ::cError := "XML undefined"
    return .F.
  endIf

  if File(cXml)
    cFileOnServer := copyFileToServer(cXml)
    if Empty(cFileOnServer)
      ::cError := "Failed to copy file to server"
      return .F.      
    endIf
    ::oXml := XmlParserFile(cFileOnServer, "_", @cError, @cWarning)
  else
    ::oXml := XmlParser(cXml, "_", @cError, @cWarning)
  endIf

  ::cError := ""  
  lOk      := (ValType(::oXml) == "O")

  if !lOk
    ::cError := "[ERROR] " + cError
    if !Empty(cWarning)
      ::cError += CRLF + "[WARNING] " + cWarning
    endIf
  endIf

  if !Empty(cFileOnServer)
    FErase(cFileOnServer)
  endIf

return lOk

/**
 * Copia o arquivo para o servidor para poder realizar o parser
 */
static function copyFileToServer(cXml)

  local oFile         := SysLibFile():new(cXml)
  local cFileOnServer := "/system/" + oFile:getFileName()

  if !oFile:copy(cFileOnServer)    
    cFileOnServer := ""
  endIf

return cFileOnServer


/*/{Protheus.doc} text

Coleta o valor de um no como string
Ex.: oXml:text("pedido:cabecalho:numero")

@author soulsys:victorhugo
@since 18/09/2021
/*/
method text(cNode, oParent) class SysLibXml

  local xRet       := nil
  private oPrvtObj := nil
  default oParent  := ::oXml

  oPrvtObj := oParent
  cNode    := "oPrvtObj:_" + Replace(AllTrim(cNode), ":", ":_") + ":text"

  if (Type(cNode) != "U")
    xRet := &cNode
  endIf

return xRet


/*/{Protheus.doc} node

Coleta o valor de um no como objeto
Ex.: oXml:node("pedido:cabecalho")

@author soulsys:victorhugo
@since 18/09/2021
/*/
method node(cNode, oParent) class SysLibXml

  local oNode      := nil
  private oPrvtObj := nil
  default oParent  := ::oXml

  oPrvtObj := oParent
  cNode    := "oPrvtObj:_" + Replace(AllTrim(cNode), ":", ":_")

  if (Type(cNode) != "U")
    oNode      := SysLibXml():new()        
    oNode:oXml := &cNode
  endIf

return oNode


/*/{Protheus.doc} list

Coleta o valor de um no em forma de array (lista de objetos)
Ex.: oXml:list("pedido:itens:item")

@author soulsys:victorhugo
@since 18/09/2021
/*/
method list(cNode, oParent) class SysLibXml

  local nI         := 0
  local aValues    := {}
  local aNodes     := {}
  local oNode      := nil
  private oPrvtObj := nil
  default oParent  := ::oXml

  oPrvtObj := oParent
  cNode    := "oPrvtObj:_" + Replace(AllTrim(cNode), ":", ":_")

  if (Type(cNode) == "U")
    return {}
  endIf

  aValues := &cNode    

  if (ValType(aValues) != "A")
    aValues := { aValues }
  endIf

  for nI := 1 to Len(aValues)
    oNode      := SysLibXml():new()        
    oNode:oXml := aValues[nI]
    aAdd(aNodes, oNode)
  next nI

return aNodes
  


/*/{Protheus.doc} nodeToString

Converte um no em string

@author soulsys:victorhugo
@since 18/09/2021
/*/
method nodeToString(oNode) class SysLibXml
  
  local cStr := ""

  cStr := XMLSaveStr(oNode, .F.)
  cStr := Replace(cStr, "\n", "")

return cStr


/*/{Protheus.doc} exists

Verifica se um no existe
Ex.: oXml:exists("pedido:cabecalho:numero")
  
@author soulsys:victorhugo
@since 18/09/2021
/*/
method exists(cNode, oParent) class SysLibXml

  local xNode := ::node(cNode, oParent)
  local xText := ::text(cNode, oParent)

return (ValType(xNode) != "U" .or. ValType(xText) != "U")


/*/{Protheus.doc} getError

Coleta o erro do ultimo parser

@author soulsys:victorhugo
@since 18/09/2021
/*/
method getError() class SysLibXml
return ::cError
