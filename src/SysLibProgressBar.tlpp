#include "tlpp-core.th"
#include "totvs.ch"
#include "rwmake.ch"

#define DEFAULT_TITLE "Aguarde"
#define DEFAULT_TEXT "Processando..."


/*/{Protheus.doc} SysLibProgressBar

Objeto para manipulacao de barras de progresso

@author soulsys:victorhugo
@since 23/05/2023
/*/
class SysLibProgressBar from SysLibAdvpl

  public data oBar

  public data lTwoBars
  public data lHidden

  public data bAction
  public data cTitle
  public data cText

  public method new() constructor

  public method setTwoBars()
  public method setHidden()
  public method setAction()
  public method start()
  public method setSteps()
  public method increment()
  public method setFirstBarSteps()
  public method setSecondBarSteps()
  public method incrementFirstBar()
  public method incrementSecondBar()

endClass


/*/{Protheus.doc} new

Construtor

@author soulsys:victorhugo
@since 23/05/2023
/*/
method new(bAction, cText, cTitle) class SysLibProgressBar

  _Super:new()

  ::oBar := nil
  ::lTwoBars := .F.
  ::lHidden := IsBlind()

  ::setAction(bAction, cText, cTitle)

return


/*/{Protheus.doc} setTwoBars

Define que o processamento sera controlado atraves de duas barras

@author soulsys:victorhugo
@since 23/05/2023
/*/
method setTwoBars(lTwoBars) class SysLibProgressBar
  ::lTwoBars := lTwoBars
return


/*/{Protheus.doc} setHidden

Define que o processamento sera realizado sem interface visual

@author soulsys:victorhugo
@since 23/05/2023
/*/
method setHidden(lHidden) class SysLibProgressBar
  ::lHidden := lHidden
return


/*/{Protheus.doc} setAction

Define a acao a ser executada

@author soulsys:victorhugo
@since 23/05/2023
/*/
method setAction(bAction, cText, cTitle) class SysLibProgressBar

  default cText := DEFAULT_TEXT
  default cTitle := DEFAULT_TITLE

  ::bAction := bAction
  ::cTitle := cTitle
  ::cText := cText

return


/*/{Protheus.doc} start

Inicia o processamento

@author soulsys:victorhugo
@since 23/05/2023
/*/
method start() class SysLibProgressBar

  local lCanAbort := .F.

  if ::lHidden
    Eval(::bAction)
    return
  endIf

  if ::lTwoBars
    ::oBar := MsNewProcess():new(::bAction, ::cTitle, ::cText, lCanAbort)
    ::oBar:activate()
  else
    Processa(::bAction, ::cTitle, ::cText, lCanAbort)
  endIf

return


/*/{Protheus.doc} setSteps

Define a quantidade de etapas do processamento

@author soulsys:victorhugo
@since 23/05/2023
/*/
method setSteps(nSteps) class SysLibProgressBar
  ProcRegua(nSteps)
return


/*/{Protheus.doc} increment

Incrementa o progresso

@author soulsys:victorhugo
@since 23/05/2023
/*/
method increment(cText) class SysLibProgressBar
  default cText := DEFAULT_TEXT
  IncProc(cText)
return


/*/{Protheus.doc} setSteps

Define a quantidade de etapas do processamento primeira da barra

@author soulsys:victorhugo
@since 23/05/2023
/*/
method setFirstBarSteps(nSteps) class SysLibProgressBar
  ::oBar:setRegua1(nSteps)
return


/*/{Protheus.doc} setSteps

Define a quantidade de etapas do processamento segunda da barra

@author soulsys:victorhugo
@since 23/05/2023
/*/
method setSecondBarSteps(nSteps) class SysLibProgressBar
  ::oBar:setRegua2(nSteps)
return


/*/{Protheus.doc} incrementFirstBar

Incrementa o progresso da primeira barra

@author soulsys:victorhugo
@since 23/05/2023
/*/
method incrementFirstBar(cText) class SysLibProgressBar
  default cText := DEFAULT_TEXT
  ::oBar:incRegua1(cText)
return


/*/{Protheus.doc} incrementSecondBar

Incrementa o progresso da segunda barra

@author soulsys:victorhugo
@since 23/05/2023
/*/
method incrementSecondBar(cText) class SysLibProgressBar
  default cText := DEFAULT_TEXT
  ::oBar:incRegua2(cText)
return
